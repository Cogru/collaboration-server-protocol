<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Specification on collaboration-server-protocol (CSP)</title><link>https://cogru.github.io/collaboration-server-protocol/specification/</link><description>Recent content in Specification on collaboration-server-protocol (CSP)</description><generator>Hugo</generator><language>en</language><atom:link href="https://cogru.github.io/collaboration-server-protocol/specification/index.xml" rel="self" type="application/rss+xml"/><item><title>buffer::save</title><link>https://cogru.github.io/collaboration-server-protocol/specification/buffer/save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/buffer/save/</guid><description>Request to save the buffer.
{ &amp;#34;method&amp;#34;: &amp;#34;buffer::save&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, } file is the target filename you want to save. contents is the entire buffer string. Example response { &amp;#34;method&amp;#34;: &amp;#34;buffer::save&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, } The client will save the buffer in the view (if it exits). Otherwise, it will write the file to the local storage.</description></item><item><title>buffer::sync</title><link>https://cogru.github.io/collaboration-server-protocol/specification/buffer/sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/buffer/sync/</guid><description>Request to synce the buffer.
{ &amp;#34;method&amp;#34;: &amp;#34;buffer::sync&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, } file is the path to the newly created file. Example response { &amp;#34;method&amp;#34;: &amp;#34;buffer::sync&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, } The client will overwrite the buffer view (if exists). Otherwise, write to the local storage.</description></item><item><title>buffer::update</title><link>https://cogru.github.io/collaboration-server-protocol/specification/buffer/update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/buffer/update/</guid><description>Addition and Deletion to the buffer.
{ &amp;#34;method&amp;#34;: &amp;#34;buffer::update&amp;#34;, &amp;#34;path&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;add_or_delete&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;beg&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;end&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, } path if the modified filename. add_or_delete is a string boolean; it&amp;rsquo;s either &amp;quot;add&amp;quot; or &amp;quot;delete&amp;quot;. beg is the beginning point of modification. end is the end point of modification. contents is the string added to the buffer (not the file contents). Example response { &amp;#34;method&amp;#34;: &amp;#34;buffer::update&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;{username}&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;add_or_delete&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;beg&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;end&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, } The client will navigate to the file and modify the existing buffer in the view.</description></item><item><title>init</title><link>https://cogru.github.io/collaboration-server-protocol/specification/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/init/</guid><description>Initialize the client on the server.
{ &amp;#34;method&amp;#34;: &amp;#34;init&amp;#34;, &amp;#34;path&amp;#34;: &amp;lt;path&amp;gt;, } path is the project directory to sync. Example response { &amp;#34;method&amp;#34;: &amp;#34;init&amp;#34;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>ping</title><link>https://cogru.github.io/collaboration-server-protocol/specification/ping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/ping/</guid><description>Ping the server.
{ &amp;#34;method&amp;#34;: &amp;#34;ping&amp;#34;, } Example response { &amp;#34;method&amp;#34;: &amp;#34;pong&amp;#34;, &amp;#34;timestamp&amp;#34;: &amp;lt;timestamp&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::add_file</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/add_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/add_file/</guid><description>Request to add a file.
{ &amp;#34;method&amp;#34;: &amp;#34;room::add_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, } file is the path to the newly created file. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::add_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;contents&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::broadcast</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/broadcast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/broadcast/</guid><description>Send a room message.
This message goes across the project.
{ &amp;#34;method&amp;#34;: &amp;#34;room::broadcast&amp;#34;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt; } message you want to say to other users in the room. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::broadcast&amp;#34;, &amp;#34;username:&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::delete_file</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/delete_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/delete_file/</guid><description>Request to delete a file.
{ &amp;#34;method&amp;#34;: &amp;#34;room::delete_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, } file is the path to the file you want to delete. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::delete_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::enter</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/enter_room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/enter_room/</guid><description>Request sent when entering the room.
{ &amp;#34;method&amp;#34;: &amp;#34;room::enter&amp;#34;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;password&amp;#34;: &amp;lt;string&amp;gt;, } username is the unique identifier being used in the session. password is used to enter the session. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::enter&amp;#34;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::exit</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/exit_room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/exit_room/</guid><description>Request sent when exiting the room.
{ &amp;#34;method&amp;#34;: &amp;#34;room::exit&amp;#34;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, } username is the unique identifier being used in the session. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::exit&amp;#34;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::info</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/info/</guid><description>Return a list of users in room.
{ &amp;#34;method&amp;#34;: &amp;#34;room::info&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, } file is the path to the file you want to delete. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::info&amp;#34;, &amp;#34;clients&amp;#34;: [{ &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;path&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;point&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;region_beg&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;region_end&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;color_cursor&amp;#34;: &amp;lt;color&amp;gt;, &amp;#34;color_region&amp;#34;: &amp;lt;color&amp;gt;, }, ... ], &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::kick</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/kick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/kick/</guid><description>Request sent when kicking a user out of the room.
{ &amp;#34;method&amp;#34;: &amp;#34;room::kick&amp;#34;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, } username is the unique identifier being used in the session. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::kick&amp;#34;, &amp;#34;username&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;admin&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;message&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::rename_file</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/rename_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/rename_file/</guid><description>Request to rename a existing file.
{ &amp;#34;method&amp;#34;: &amp;#34;room::rename_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;newname&amp;#34;: &amp;lt;path&amp;gt;, } file is the target file path you want the file to rename. newname is the new filename. Example response { &amp;#34;method&amp;#34;: &amp;#34;room::rename_file&amp;#34;, &amp;#34;file&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;newname&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, }</description></item><item><title>room::update_client</title><link>https://cogru.github.io/collaboration-server-protocol/specification/room/update_client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cogru.github.io/collaboration-server-protocol/specification/room/update_client/</guid><description>Update a single client&amp;rsquo;s information.
This request should be sent every almost every state change since the server will need to notify other clients to update their state.
{ &amp;#34;method&amp;#34;: &amp;#34;room::update_client&amp;#34;, &amp;#34;path&amp;#34;: &amp;lt;path&amp;gt;, &amp;#34;point&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;region_beg&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;region_end&amp;#34;: &amp;lt;number&amp;gt;, &amp;#34;color_cursor&amp;#34;: &amp;lt;color&amp;gt;, &amp;#34;color_region&amp;#34;: &amp;lt;color&amp;gt;, } path the file path the user is currently in. point is the cursor position (byte position). region_beg is the beginning of the region (when active); omit or null if region is not active.</description></item></channel></rss>